/*
 * Cervinodata API documentation
 * <div style='margin: 2em 0;'>  <p>  Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>).  </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/articles/360014265139' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cervinodata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cervinodata.client.api;

import com.cervinodata.client.ApiCallback;
import com.cervinodata.client.ApiClient;
import com.cervinodata.client.ApiException;
import com.cervinodata.client.ApiResponse;
import com.cervinodata.client.Configuration;
import com.cervinodata.client.Pair;
import com.cervinodata.client.ProgressRequestBody;
import com.cervinodata.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignGroupApi {
    private ApiClient localVarApiClient;

    public CampaignGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignGroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getCampaignGroupAdReportPerOrganisationPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdReportPerOrganisationPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-ad-report-per-organisation-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupAdReportPerOrganisationPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupAdReportPerOrganisationPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group ad report per organisation per campaign per day
     * Campaign group ad report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupAdReportPerOrganisationPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupAdReportPerOrganisationPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group ad report per organisation per campaign per day
     * Campaign group ad report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupAdReportPerOrganisationPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group ad report per organisation per campaign per day (asynchronously)
     * Campaign group ad report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdReportPerOrganisationPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-ad-report-per-organisation-per-campaign-per-week/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group ad report per organisation per campaign per week
     * Campaign group ad report per organisation per campaign per week
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupAdReportPerOrganisationPerCampaignPerWeek(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group ad report per organisation per campaign per week
     * Campaign group ad report per organisation per campaign per week
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group ad report per organisation per campaign per week (asynchronously)
     * Campaign group ad report per organisation per campaign per week
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerCampaignPerWeekValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupAdReportPerOrganisationPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdReportPerOrganisationPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-ad-report-per-organisation-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupAdReportPerOrganisationPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupAdReportPerOrganisationPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group ad report per organisation per day
     * Campaign group ad report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupAdReportPerOrganisationPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupAdReportPerOrganisationPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group ad report per organisation per day
     * Campaign group ad report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupAdReportPerOrganisationPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group ad report per organisation per day (asynchronously)
     * Campaign group ad report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdReportPerOrganisationPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupAdReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-adform-report-per-organisation-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group adform report per organisation per campaign per day
     * Campaign group adform report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupAdformReportPerOrganisationPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group adform report per organisation per campaign per day
     * Campaign group adform report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group adform report per organisation per campaign per day (asynchronously)
     * Campaign group adform report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupAdformReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-adform-report-per-organisation-per-campaign-per-line-item-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group adform report per organisation per campaign per line-item per day
     * Campaign group adform report per organisation per campaign per line-item per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group adform report per organisation per campaign per line-item per day
     * Campaign group adform report per organisation per campaign per line-item per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group adform report per organisation per campaign per line-item per day (asynchronously)
     * Campaign group adform report per organisation per campaign per line-item per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupAdformReportPerOrganisationPerCampaignPerLineItemPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupAnalyticsReportPerOrganisationPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAnalyticsReportPerOrganisationPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-analytics-report-per-organisation-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupAnalyticsReportPerOrganisationPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupAnalyticsReportPerOrganisationPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupAnalyticsReportPerOrganisationPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group analytics report per organisation per day
     * Campaign group analytics report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupAnalyticsReportPerOrganisationPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupAnalyticsReportPerOrganisationPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group analytics report per organisation per day
     * Campaign group analytics report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupAnalyticsReportPerOrganisationPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupAnalyticsReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group analytics report per organisation per day (asynchronously)
     * Campaign group analytics report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupAnalyticsReportPerOrganisationPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupAnalyticsReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group bing ads extended report per organisation per account per campaign per day
     * Campaign group bing ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group bing ads extended report per organisation per account per campaign per day
     * Campaign group bing ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group bing ads extended report per organisation per account per campaign per day (asynchronously)
     * Campaign group bing ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-doubleclick-bid-manager-report-per-organisation-per-account-per-campaign-per-creative-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     * Campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     * Campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per creative per day (asynchronously)
     * Campaign group doubleclick bid manager report per organisation per account per campaign per creative per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerCreativePerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-doubleclick-bid-manager-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per day
     * Campaign group doubleclick bid manager report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per day
     * Campaign group doubleclick bid manager report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group doubleclick bid manager report per organisation per account per campaign per day (asynchronously)
     * Campaign group doubleclick bid manager report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupDoubleClickBidManagerReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-doubleclick-campaign-manager-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group doubleclick campaign manager report per organisation per account per campaign per day
     * Campaign group doubleclick campaign manager report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group doubleclick campaign manager report per organisation per account per campaign per day
     * Campaign group doubleclick campaign manager report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group doubleclick campaign manager report per organisation per account per campaign per day (asynchronously)
     * Campaign group doubleclick campaign manager report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupDoubleClickCampaignManagerReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-facebook-ad-custom-conversion-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group facebook ad custom conversion report per organisation per account per campaign per day
     * Campaign group facebook ad custom conversion report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group facebook ad custom conversion report per organisation per account per campaign per day
     * Campaign group facebook ad custom conversion report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group facebook ad custom conversion report per organisation per account per campaign per day (asynchronously)
     * Campaign group facebook ad custom conversion report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdCustomConversionReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-group-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     * Campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     * Campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad group per day (asynchronously)
     * Campaign group facebook ad extended report per organisation per account per campaign per ad group per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdGroupPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-ad-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad per day
     * Campaign group facebook ad extended report per organisation per account per campaign per ad per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad per day
     * Campaign group facebook ad extended report per organisation per account per campaign per ad per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group facebook ad extended report per organisation per account per campaign per ad per day (asynchronously)
     * Campaign group facebook ad extended report per organisation per account per campaign per ad per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerAdPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-facebook-ad-extended-report-per-organisation-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group facebook ad extended report per organisation per campaign per day
     * Campaign group facebook ad extended report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group facebook ad extended report per organisation per campaign per day
     * Campaign group facebook ad extended report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group facebook ad extended report per organisation per campaign per day (asynchronously)
     * Campaign group facebook ad extended report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdExtendedReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-facebook-ad-report-per-organisation-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group facebook ad report per organisation per campaign per day
     * Campaign group facebook ad report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group facebook ad report per organisation per campaign per day
     * Campaign group facebook ad report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group facebook ad report per organisation per campaign per day (asynchronously)
     * Campaign group facebook ad report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupFacebookAdReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupGoalReportPerOrganisationPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupGoalReportPerOrganisationPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-goal-report-per-organisation-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupGoalReportPerOrganisationPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupGoalReportPerOrganisationPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupGoalReportPerOrganisationPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group goal report per organisation per day
     * Campaign group goal report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupGoalReportPerOrganisationPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupGoalReportPerOrganisationPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group goal report per organisation per day
     * Campaign group goal report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupGoalReportPerOrganisationPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupGoalReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group goal report per organisation per day (asynchronously)
     * Campaign group goal report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupGoalReportPerOrganisationPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupGoalReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-google-ads-report-per-organisation-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group google ads report per organisation per campaign per day
     * Campaign group google ads report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group google ads report per organisation per campaign per day
     * Campaign group google ads report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group google ads report per organisation per campaign per day (asynchronously)
     * Campaign group google ads report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupGoogleAdsReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group linkedin ads extended report per organisation per account per campaign per day
     * Campaign group linkedin ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group linkedin ads extended report per organisation per account per campaign per day
     * Campaign group linkedin ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group linkedin ads extended report per organisation per account per campaign per day (asynchronously)
     * Campaign group linkedin ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupReportPerOrganisationPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupReportPerOrganisationPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-report-per-organisation-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupReportPerOrganisationPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupReportPerOrganisationPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupReportPerOrganisationPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group report per organisation per day
     * Campaign group report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupReportPerOrganisationPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupReportPerOrganisationPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group report per organisation per day
     * Campaign group report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupReportPerOrganisationPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group report per organisation per day (asynchronously)
     * Campaign group report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupReportPerOrganisationPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-snapchat-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group snapchat ads extended report per organisation per account per campaign per day
     * Campaign group snapchat ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group snapchat ads extended report per organisation per account per campaign per day
     * Campaign group snapchat ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group snapchat ads extended report per organisation per account per campaign per day (asynchronously)
     * Campaign group snapchat ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupSnapchatAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-twitter-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group twitter ads extended report per organisation per account per campaign per day
     * Campaign group twitter ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group twitter ads extended report per organisation per account per campaign per day
     * Campaign group twitter ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group twitter ads extended report per organisation per account per campaign per day (asynchronously)
     * Campaign group twitter ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupTwitterAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-video-report-per-organisation-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group video report per organisation per campaign per day
     * Campaign group video report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupVideoReportPerOrganisationPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group video report per organisation per campaign per day
     * Campaign group video report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group video report per organisation per campaign per day (asynchronously)
     * Campaign group video report per organisation per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupVideoReportPerOrganisationPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignGroupVideoReportPerOrganisationPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupVideoReportPerOrganisationPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/campaign-group-video-report-per-organisation-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignGroupVideoReportPerOrganisationPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getCampaignGroupVideoReportPerOrganisationPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignGroupVideoReportPerOrganisationPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return campaign group video report per organisation per day
     * Campaign group video report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getCampaignGroupVideoReportPerOrganisationPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getCampaignGroupVideoReportPerOrganisationPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return campaign group video report per organisation per day
     * Campaign group video report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getCampaignGroupVideoReportPerOrganisationPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getCampaignGroupVideoReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return campaign group video report per organisation per day (asynchronously)
     * Campaign group video report per organisation per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignGroupVideoReportPerOrganisationPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignGroupVideoReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
