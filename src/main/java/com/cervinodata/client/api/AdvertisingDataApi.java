/*
 * Cervinodata API documentation
 * <div style='margin: 2em 0;'>  <p>  Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>).  </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/en-nl/articles/360009250458-Limits-for-Free-plan-users' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cervinodata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cervinodata.client.api;

import com.cervinodata.client.ApiCallback;
import com.cervinodata.client.ApiClient;
import com.cervinodata.client.ApiException;
import com.cervinodata.client.ApiResponse;
import com.cervinodata.client.Configuration;
import com.cervinodata.client.Pair;
import com.cervinodata.client.ProgressRequestBody;
import com.cervinodata.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdvertisingDataApi {
    private ApiClient localVarApiClient;

    public AdvertisingDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdvertisingDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAdAccountReportPerOrganisationPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdAccountReportPerOrganisationPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ad-account-report-per-organisation-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdAccountReportPerOrganisationPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getAdAccountReportPerOrganisationPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getAdAccountReportPerOrganisationPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return ad account report per organisation per day
     * Ad account report per organisation  per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAdAccountReportPerOrganisationPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAdAccountReportPerOrganisationPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return ad account report per organisation per day
     * Ad account report per organisation  per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAdAccountReportPerOrganisationPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAdAccountReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return ad account report per organisation per day (asynchronously)
     * Ad account report per organisation  per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdAccountReportPerOrganisationPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdAccountReportPerOrganisationPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdAccounts
     * @param organisationUuid Organisation uuid (required)
     * @param format Output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdAccountsCall(String organisationUuid, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ad-accounts/{organisationUuid}"
            .replaceAll("\\{" + "organisationUuid" + "\\}", localVarApiClient.escapeString(organisationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdAccountsValidateBeforeCall(String organisationUuid, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuid' is set
        if (organisationUuid == null) {
            throw new ApiException("Missing the required parameter 'organisationUuid' when calling getAdAccounts(Async)");
        }
        

        okhttp3.Call localVarCall = getAdAccountsCall(organisationUuid, format, _callback);
        return localVarCall;

    }

    /**
     * Return ad accounts by organisation
     * Ad accounts by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param format Output format (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAdAccounts(String organisationUuid, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAdAccountsWithHttpInfo(organisationUuid, format);
        return localVarResp.getData();
    }

    /**
     * Return ad accounts by organisation
     * Ad accounts by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param format Output format (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAdAccountsWithHttpInfo(String organisationUuid, String format) throws ApiException {
        okhttp3.Call localVarCall = getAdAccountsValidateBeforeCall(organisationUuid, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return ad accounts by organisation (asynchronously)
     * Ad accounts by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param format Output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdAccountsAsync(String organisationUuid, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdAccountsValidateBeforeCall(organisationUuid, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdCampaignReportPerDay
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCampaignReportPerDayCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ad-campaign-report-per-day/{organisationUuid}"
            .replaceAll("\\{" + "organisationUuid" + "\\}", localVarApiClient.escapeString(organisationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdCampaignReportPerDayValidateBeforeCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuid' is set
        if (organisationUuid == null) {
            throw new ApiException("Missing the required parameter 'organisationUuid' when calling getAdCampaignReportPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getAdCampaignReportPerDayCall(organisationUuid, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return ad campaign report per day by organisation
     * Ad campaign report per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAdCampaignReportPerDay(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAdCampaignReportPerDayWithHttpInfo(organisationUuid, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return ad campaign report per day by organisation
     * Ad campaign report per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAdCampaignReportPerDayWithHttpInfo(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAdCampaignReportPerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return ad campaign report per day by organisation (asynchronously)
     * Ad campaign report per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCampaignReportPerDayAsync(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdCampaignReportPerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ad-campaign-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return ad campaign report per organisation per account per campaign per device per day
     * Ad campaign report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return ad campaign report per organisation per account per campaign per device per day
     * Ad campaign report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return ad campaign report per organisation per account per campaign per device per day (asynchronously)
     * Ad campaign report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdCampaignReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdCampaignReportPerOrganisationPerAccountPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCampaignReportPerOrganisationPerAccountPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ad-campaign-report-per-organisation-per-account-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdCampaignReportPerOrganisationPerAccountPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getAdCampaignReportPerOrganisationPerAccountPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getAdCampaignReportPerOrganisationPerAccountPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return ad campaign report per organisation per account per day
     * Ad campaign report per organisation per account per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAdCampaignReportPerOrganisationPerAccountPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAdCampaignReportPerOrganisationPerAccountPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return ad campaign report per organisation per account per day
     * Ad campaign report per organisation per account per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAdCampaignReportPerOrganisationPerAccountPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAdCampaignReportPerOrganisationPerAccountPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return ad campaign report per organisation per account per day (asynchronously)
     * Ad campaign report per organisation per account per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCampaignReportPerOrganisationPerAccountPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdCampaignReportPerOrganisationPerAccountPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdCampaigns
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param format Output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCampaignsCall(String organisationUuid, LocalDate fromDate, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ad-campaigns/{organisationUuid}"
            .replaceAll("\\{" + "organisationUuid" + "\\}", localVarApiClient.escapeString(organisationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdCampaignsValidateBeforeCall(String organisationUuid, LocalDate fromDate, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuid' is set
        if (organisationUuid == null) {
            throw new ApiException("Missing the required parameter 'organisationUuid' when calling getAdCampaigns(Async)");
        }
        

        okhttp3.Call localVarCall = getAdCampaignsCall(organisationUuid, fromDate, format, _callback);
        return localVarCall;

    }

    /**
     * Return ad campaigns by organisation
     * Ad campaigns by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param format Output format (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAdCampaigns(String organisationUuid, LocalDate fromDate, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAdCampaignsWithHttpInfo(organisationUuid, fromDate, format);
        return localVarResp.getData();
    }

    /**
     * Return ad campaigns by organisation
     * Ad campaigns by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param format Output format (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAdCampaignsWithHttpInfo(String organisationUuid, LocalDate fromDate, String format) throws ApiException {
        okhttp3.Call localVarCall = getAdCampaignsValidateBeforeCall(organisationUuid, fromDate, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return ad campaigns by organisation (asynchronously)
     * Ad campaigns by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param format Output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdCampaignsAsync(String organisationUuid, LocalDate fromDate, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdCampaignsValidateBeforeCall(organisationUuid, fromDate, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/bing-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return bing ads extended report per organisation per account per campaign per day
     * Bing ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return bing ads extended report per organisation per account per campaign per day
     * Bing ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return bing ads extended report per organisation per account per campaign per day (asynchronously)
     * Bing ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBingAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return facebook ad extended report per organisation per account per campaign per day
     * Facebook ad extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return facebook ad extended report per organisation per account per campaign per day
     * Facebook ad extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return facebook ad extended report per organisation per account per campaign per day (asynchronously)
     * Facebook ad extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/facebook-ad-extended-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return facebook ad extended report per organisation per account per campaign per device per day
     * Facebook ad extended report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return facebook ad extended report per organisation per account per campaign per device per day
     * Facebook ad extended report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return facebook ad extended report per organisation per account per campaign per device per day (asynchronously)
     * Facebook ad extended report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacebookAdExtendedReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/google-ads-report-per-organisation-per-account-per-campaign-per-device-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return google ads report per organisation per account per campaign per device per day
     * Campaign group google ads report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return google ads report per organisation per account per campaign per device per day
     * Campaign group google ads report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return google ads report per organisation per account per campaign per device per day (asynchronously)
     * Campaign group google ads report per organisation per account per campaign per device per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGoogleAdsReportPerOrganisationPerAccountPerCampaignPerDevicePerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/linkedin-ads-extended-report-per-organisation-per-account-per-campaign-per-day/{organisationUuids}"
            .replaceAll("\\{" + "organisationUuids" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(Async)");
        }
        

        okhttp3.Call localVarCall = getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);
        return localVarCall;

    }

    /**
     * Return linkedin ads extended report per organisation per account per campaign per day
     * Linkedin ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return linkedin ads extended report per organisation per account per campaign per day
     * Linkedin ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return linkedin ads extended report per organisation per account per campaign per day (asynchronously)
     * Linkedin ads extended report per organisation per account per campaign per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkedInAdsExtendedReportPerOrganisationPerAccountPerCampaignPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
