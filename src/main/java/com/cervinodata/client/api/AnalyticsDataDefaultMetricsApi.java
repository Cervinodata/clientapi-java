/*
 * Cervinodata API documentation
 * <div style='margin: 2em 0;'> <p> Before you get going with the Cervinodata API, set up Cervinodata (read the support page here: <a href='https://support.cervinodata.com/hc/en-nl/articles/360004363237' target='_blank'>How to set up the Cervinodata API</a>). </p> <h3>To use the Cervinodata API, you need all of the following:</h3> <p> <ol> <li>An active Cervinodata account, you can start a free trial <a href='https://app.cervinodata.com/register' target='_blank'>here</a></li> <li>At least one connection to a platform (check <a href='https://app.cervinodata.com/data-sources-connections' target='_blank'>here</a>)</li> <li>At least one account switched ON (check <a href='https://app.cervinodata.com/accounts' target='_blank'>here</a>)</li> <li>At least one data refresh executed (check <a href='https://app.cervinodata.com/manual-data-refresh' target='_blank'>here</a>)</li> <li>An active API token (check <a href='https://app.cervinodata.com/settings#/api' target='_blank'>here</a>)</li> </ol> </p> <p> Note that limits apply for <a href='https://support.cervinodata.com/hc/articles/360014265139' target='_blank'>Free plan users</a>. </p> <p> If you wish to automate your Cervinodata API connection, check out the list of client API's at <a href='https://github.com/Cervinodata' target='_blank'>https://github.com/Cervinodata</a>. </p> </div>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cervinodata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cervinodata.client.api;

import com.cervinodata.client.ApiCallback;
import com.cervinodata.client.ApiClient;
import com.cervinodata.client.ApiException;
import com.cervinodata.client.ApiResponse;
import com.cervinodata.client.Configuration;
import com.cervinodata.client.Pair;
import com.cervinodata.client.ProgressRequestBody;
import com.cervinodata.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.joda.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsDataDefaultMetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyticsDataDefaultMetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsDataDefaultMetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAnalyticsReportPerCampaignPerDay
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerCampaignPerDayCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/analytics-report-per-campaign-per-day/{organisationUuid}"
            .replace("{" + "organisationUuid" + "}", localVarApiClient.escapeString(organisationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsReportPerCampaignPerDayValidateBeforeCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationUuid' is set
        if (organisationUuid == null) {
            throw new ApiException("Missing the required parameter 'organisationUuid' when calling getAnalyticsReportPerCampaignPerDay(Async)");
        }

        return getAnalyticsReportPerCampaignPerDayCall(organisationUuid, fromDate, dateFormat, format, _callback);

    }

    /**
     * Return analytics report per campaign per day by organisation
     * Analytics report per campaign per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAnalyticsReportPerCampaignPerDay(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAnalyticsReportPerCampaignPerDayWithHttpInfo(organisationUuid, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return analytics report per campaign per day by organisation
     * Analytics report per campaign per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAnalyticsReportPerCampaignPerDayWithHttpInfo(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsReportPerCampaignPerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return analytics report per campaign per day by organisation (asynchronously)
     * Analytics report per campaign per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerCampaignPerDayAsync(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsReportPerCampaignPerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsReportPerChannelGroupPerDay
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerChannelGroupPerDayCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/analytics-report-per-channel-group-per-day/{organisationUuid}"
            .replace("{" + "organisationUuid" + "}", localVarApiClient.escapeString(organisationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsReportPerChannelGroupPerDayValidateBeforeCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationUuid' is set
        if (organisationUuid == null) {
            throw new ApiException("Missing the required parameter 'organisationUuid' when calling getAnalyticsReportPerChannelGroupPerDay(Async)");
        }

        return getAnalyticsReportPerChannelGroupPerDayCall(organisationUuid, fromDate, dateFormat, format, _callback);

    }

    /**
     * Return analytics report per channel group per day by organisation
     * Analytics report per channel group per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAnalyticsReportPerChannelGroupPerDay(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAnalyticsReportPerChannelGroupPerDayWithHttpInfo(organisationUuid, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return analytics report per channel group per day by organisation
     * Analytics report per channel group per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAnalyticsReportPerChannelGroupPerDayWithHttpInfo(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsReportPerChannelGroupPerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return analytics report per channel group per day by organisation (asynchronously)
     * Analytics report per channel group per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerChannelGroupPerDayAsync(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsReportPerChannelGroupPerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/analytics-report-per-device-per-channel-group-per-organisation-per-view-per-day/{organisationUuids}"
            .replace("{" + "organisationUuids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay(Async)");
        }

        return getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);

    }

    /**
     * Return analytics report per device per channel group per organisation per view per day
     * Analytics report per device per channel group per organisation per view per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return analytics report per device per channel group per organisation per view per day
     * Analytics report per device per channel group per organisation per view per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return analytics report per device per channel group per organisation per view per day (asynchronously)
     * Analytics report per device per channel group per organisation per view per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsReportPerDevicePerChannelGroupPerOrganisationPerViewPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsReportPerDevicePerDay
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerDevicePerDayCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/analytics-report-per-device-per-day/{organisationUuid}"
            .replace("{" + "organisationUuid" + "}", localVarApiClient.escapeString(organisationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsReportPerDevicePerDayValidateBeforeCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationUuid' is set
        if (organisationUuid == null) {
            throw new ApiException("Missing the required parameter 'organisationUuid' when calling getAnalyticsReportPerDevicePerDay(Async)");
        }

        return getAnalyticsReportPerDevicePerDayCall(organisationUuid, fromDate, dateFormat, format, _callback);

    }

    /**
     * Return analytics report per device per day by organisation
     * Analytics report per device per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAnalyticsReportPerDevicePerDay(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAnalyticsReportPerDevicePerDayWithHttpInfo(organisationUuid, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return analytics report per device per day by organisation
     * Analytics report per device per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAnalyticsReportPerDevicePerDayWithHttpInfo(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsReportPerDevicePerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return analytics report per device per day by organisation (asynchronously)
     * Analytics report per device per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerDevicePerDayAsync(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsReportPerDevicePerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyticsReportPerSourceMediumPerDay
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerSourceMediumPerDayCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/analytics-report-per-source-medium-per-day/{organisationUuid}"
            .replace("{" + "organisationUuid" + "}", localVarApiClient.escapeString(organisationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsReportPerSourceMediumPerDayValidateBeforeCall(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationUuid' is set
        if (organisationUuid == null) {
            throw new ApiException("Missing the required parameter 'organisationUuid' when calling getAnalyticsReportPerSourceMediumPerDay(Async)");
        }

        return getAnalyticsReportPerSourceMediumPerDayCall(organisationUuid, fromDate, dateFormat, format, _callback);

    }

    /**
     * Return analytics report per source medium per day by organisation
     * Analytics report per source medium per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public String getAnalyticsReportPerSourceMediumPerDay(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getAnalyticsReportPerSourceMediumPerDayWithHttpInfo(organisationUuid, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return analytics report per source medium per day by organisation
     * Analytics report per source medium per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getAnalyticsReportPerSourceMediumPerDayWithHttpInfo(String organisationUuid, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsReportPerSourceMediumPerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return analytics report per source medium per day by organisation (asynchronously)
     * Analytics report per source medium per day by organisation
     * @param organisationUuid Organisation uuid (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuid supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuid not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsReportPerSourceMediumPerDayAsync(String organisationUuid, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsReportPerSourceMediumPerDayValidateBeforeCall(organisationUuid, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ga4-report-per-device-per-channel-group-per-organisation-per-property-per-day/{organisationUuids}"
            .replace("{" + "organisationUuids" + "}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", organisationUuids)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_date", fromDate));
        }

        if (dateFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_format", dateFormat));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayValidateBeforeCall(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organisationUuids' is set
        if (organisationUuids == null) {
            throw new ApiException("Missing the required parameter 'organisationUuids' when calling getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay(Async)");
        }

        return getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayCall(organisationUuids, fromDate, dateFormat, format, _callback);

    }

    /**
     * Return GA4 report per device per channel group per organisation per property per day
     * GA4 report per device per channel group per organisation per property per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public String getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDay(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        ApiResponse<String> localVarResp = getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayWithHttpInfo(organisationUuids, fromDate, dateFormat, format);
        return localVarResp.getData();
    }

    /**
     * Return GA4 report per device per channel group per organisation per property per day
     * GA4 report per device per channel group per organisation per property per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayWithHttpInfo(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return GA4 report per device per channel group per organisation per property per day (asynchronously)
     * GA4 report per device per channel group per organisation per property per day
     * @param organisationUuids Organisation uuids (required)
     * @param fromDate From date (optional)
     * @param dateFormat Outputted date format (optional)
     * @param format Output format (use csv for large result sets) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Organisation uuids supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Organisation uuids not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayAsync(List<String> organisationUuids, LocalDate fromDate, String dateFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGA4ReportPerDevicePerChannelGroupPerOrganisationPerPropertyPerDayValidateBeforeCall(organisationUuids, fromDate, dateFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
